name: API Tests with Postman/Newman

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/src/**'
      - 'backend/postman/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/src/**'
      - 'backend/postman/**'
  workflow_dispatch:

jobs:
  api-tests:
    runs-on: ubuntu-latest
    
    services:
      # MongoDB service for testing
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Install Newman
      run: npm install -g newman newman-reporter-html
    
    - name: Create test environment file
      working-directory: ./backend
      run: |
        cp .env.example .env
        # Set test environment variables
        echo "NODE_ENV=test" >> .env
        echo "PORT=5000" >> .env
        echo "MONGODB_URI=mongodb://localhost:27017/tictactoe_test" >> .env
        echo "JWT_SECRET=test-jwt-secret-key" >> .env
        echo "JWT_REFRESH_SECRET=test-jwt-refresh-secret-key" >> .env
    
    - name: Build TypeScript
      working-directory: ./backend
      run: npm run build
    
    - name: Start server in background
      working-directory: ./backend
      run: |
        npm start &
        echo $! > server.pid
    
    - name: Wait for server to start
      run: |
        echo "Waiting for server to start..."
        timeout 60 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
    
    - name: Run Postman collection tests
      working-directory: ./backend/postman
      run: |
        newman run Tic_Tac_Toe_API.postman_collection.json \
          -e Tic_Tac_Toe_Development.postman_environment.json \
          --reporters cli,html \
          --reporter-html-export reports/api-test-report.html \
          --color on
    
    - name: Run specific folder tests
      working-directory: ./backend/postman
      run: |
        # Test Authentication endpoints
        newman run Tic_Tac_Toe_API.postman_collection.json \
          -e Tic_Tac_Toe_Development.postman_environment.json \
          --folder "Authentication" \
          --reporters cli,json \
          --reporter-json-export reports/auth-test-report.json
        
        # Test Game Management endpoints
        newman run Tic_Tac_Toe_API.postman_collection.json \
          -e Tic_Tac_Toe_Development.postman_environment.json \
          --folder "Game Management" \
          --reporters cli,json \
          --reporter-json-export reports/game-test-report.json
    
    - name: Stop server
      working-directory: ./backend
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: newman-test-reports-node-${{ matrix.node-version }}
        path: |
          backend/postman/reports/*.html
          backend/postman/reports/*.json
          backend/postman/reports/*.xml
        retention-days: 30
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Try to read test results
          let testSummary = "## üß™ API Test Results\n\n";
          
          try {
            const reportsDir = path.join(process.cwd(), 'backend/postman/reports');
            if (fs.existsSync(reportsDir)) {
              const files = fs.readdirSync(reportsDir);
              const jsonReports = files.filter(f => f.endsWith('.json'));
              
              if (jsonReports.length > 0) {
                testSummary += "### Test Summary:\n";
                for (const report of jsonReports) {
                  const reportPath = path.join(reportsDir, report);
                  const data = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                  
                  const stats = data.run.stats;
                  testSummary += `\n**${report}**:\n`;
                  testSummary += `- Requests: ${stats.requests.total} (${stats.requests.failed} failed)\n`;
                  testSummary += `- Tests: ${stats.tests.total} (${stats.tests.failed} failed)\n`;
                  testSummary += `- Assertions: ${stats.assertions.total} (${stats.assertions.failed} failed)\n`;
                }
              }
            }
          } catch (error) {
            testSummary += "‚ö†Ô∏è Could not parse test results\n";
          }
          
          testSummary += "\nüìä Detailed test reports are available in the GitHub Actions artifacts.";
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          });

  # Separate job for smoke tests on staging (if staging environment is available)
  staging-smoke-tests:
    runs-on: ubuntu-latest
    needs: api-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Newman
      run: npm install -g newman
    
    - name: Run staging smoke tests
      working-directory: ./backend/postman
      run: |
        # Only run health check and basic auth tests on staging
        newman run Tic_Tac_Toe_API.postman_collection.json \
          -e Tic_Tac_Toe_Staging.postman_environment.json \
          --folder "Health Check" \
          --reporters cli \
          --color on
      continue-on-error: true
