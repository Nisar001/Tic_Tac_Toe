{
	"info": {
		"_postman_id": "test-data-setup-123",
		"name": "Test Data Setup",
		"description": "Collection to set up test data for comprehensive API testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup Test Environment",
			"item": [
				{
					"name": "Create Test User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User 1 created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('testUser1Id', responseJson.data.user.id);",
									"    pm.environment.set('testUser1Token', responseJson.data.token);",
									"    console.log('Test User 1 ID:', responseJson.data.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{testUsername}}\",\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"displayName\": \"Test User One\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "register"]
						}
					}
				},
				{
					"name": "Create Test User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User 2 created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('testUser2Id', responseJson.data.user.id);",
									"    pm.environment.set('testUser2Token', responseJson.data.token);",
									"    console.log('Test User 2 ID:', responseJson.data.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{testUsername2}}\",\n  \"email\": \"{{testEmail2}}\",\n  \"password\": \"{{testPassword2}}\",\n  \"displayName\": \"Test User Two\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "register"]
						}
					}
				},
				{
					"name": "Create Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin user created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('adminUserId', responseJson.data.user.id);",
									"    pm.environment.set('adminToken', responseJson.data.token);",
									"    console.log('Admin User ID:', responseJson.data.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"email\": \"admin@tictactoe.com\",\n  \"password\": \"AdminPassword123!\",\n  \"displayName\": \"Administrator\",\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "register"]
						}
					}
				}
			]
		},
		{
			"name": "Setup Test Games",
			"item": [
				{
					"name": "Create Test Game 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Game 1 created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('testGame1Id', responseJson.data.id);",
									"    console.log('Test Game 1 ID:', responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{testUser1Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isPrivate\": false,\n  \"timeLimit\": 300,\n  \"difficulty\": \"medium\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/game/create-custom",
							"host": ["{{baseUrl}}"],
							"path": ["api", "game", "create-custom"]
						}
					}
				},
				{
					"name": "Create Private Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Private game created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('testPrivateGameId', responseJson.data.id);",
									"    console.log('Private Game ID:', responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{testUser2Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isPrivate\": true,\n  \"timeLimit\": 600,\n  \"difficulty\": \"hard\",\n  \"invitedPlayerEmail\": \"{{testEmail}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/game/create-custom",
							"host": ["{{baseUrl}}"],
							"path": ["api", "game", "create-custom"]
						}
					}
				}
			]
		},
		{
			"name": "Setup Test Relationships",
			"item": [
				{
					"name": "Send Friend Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Friend request sent successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('testFriendRequestId', responseJson.data.id);",
									"    console.log('Friend Request ID:', responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{testUser1Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"targetUserId\": \"{{testUser2Id}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/friends/send-request",
							"host": ["{{baseUrl}}"],
							"path": ["api", "friends", "send-request"]
						}
					}
				},
				{
					"name": "Accept Friend Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Friend request accepted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"console.log('Users are now friends!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{testUser2Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/friends/accept-request/{{testFriendRequestId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "friends", "accept-request", "{{testFriendRequestId}}"]
						}
					}
				}
			]
		},
		{
			"name": "Setup Test Chat",
			"item": [
				{
					"name": "Send Test Message 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Message 1 sent successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('testMessage1Id', responseJson.data.id);",
									"    if (responseJson.data.chatRoom) {",
									"        pm.environment.set('testChatRoomId', responseJson.data.chatRoom);",
									"    }",
									"    console.log('Test Message 1 ID:', responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{testUser1Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipientId\": \"{{testUser2Id}}\",\n  \"content\": \"Hello from Test User 1! This is our first test message.\",\n  \"type\": \"direct\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/chat/send-message",
							"host": ["{{baseUrl}}"],
							"path": ["api", "chat", "send-message"]
						}
					}
				},
				{
					"name": "Send Test Message 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Message 2 sent successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('testMessage2Id', responseJson.data.id);",
									"    console.log('Test Message 2 ID:', responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{testUser2Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipientId\": \"{{testUser1Id}}\",\n  \"content\": \"Hi there! This is a reply from Test User 2. How are you doing?\",\n  \"type\": \"direct\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/chat/send-message",
							"host": ["{{baseUrl}}"],
							"path": ["api", "chat", "send-message"]
						}
					}
				}
			]
		},
		{
			"name": "Cleanup Test Data",
			"item": [
				{
					"name": "Delete Test Users (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This is a cleanup endpoint that should only be available in test environment",
									"pm.test(\"Cleanup successful or endpoint not available\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405]);",
									"});",
									"",
									"console.log('Cleanup completed (if endpoint is available)');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "X-Admin-Key",
								"value": "{{adminApiKey}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/cleanup-test-data",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin", "cleanup-test-data"]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script for test data setup",
					"",
					"// Generate unique test data if needed",
					"const timestamp = Date.now();",
					"",
					"if (!pm.environment.get('testEmail')) {",
					"    pm.environment.set('testEmail', `test${timestamp}@example.com`);",
					"}",
					"",
					"if (!pm.environment.get('testEmail2')) {",
					"    pm.environment.set('testEmail2', `test2${timestamp}@example.com`);",
					"}",
					"",
					"if (!pm.environment.get('testUsername')) {",
					"    pm.environment.set('testUsername', `testuser${timestamp}`);",
					"}",
					"",
					"if (!pm.environment.get('testUsername2')) {",
					"    pm.environment.set('testUsername2', `testuser2${timestamp}`);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
}
