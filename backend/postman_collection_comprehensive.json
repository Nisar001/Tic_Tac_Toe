{
  "info": {
    "name": "Tic Tac Toe API - Comprehensive Collection",
    "description": "Complete API collection for Tic Tac Toe game with authentication, game management, and chat functionality",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "gameId",
      "value": "",
      "type": "string"
    },
    {
      "key": "roomId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to:', pm.request.url);",
          "",
          "// Add timestamp to requests",
          "pm.environment.set('timestamp', new Date().toISOString());",
          "",
          "// Check if auth token is needed and available",
          "const needsAuth = pm.request.url.toString().includes('/auth/profile') ||",
          "                  pm.request.url.toString().includes('/game/') ||",
          "                  pm.request.url.toString().includes('/chat/');",
          "",
          "if (needsAuth && !pm.environment.get('authToken')) {",
          "    console.warn('This request requires authentication but no token is set');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Status code is success', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
          "});",
          "",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has valid JSON', function () {",
          "    pm.response.to.have.jsonBody();",
          "});",
          "",
          "// Store common response data",
          "if (pm.response.json() && pm.response.json().success) {",
          "    const responseData = pm.response.json().data;",
          "    ",
          "    if (responseData && responseData.token) {",
          "        pm.environment.set('authToken', responseData.token);",
          "        console.log('Auth token stored');",
          "    }",
          "    ",
          "    if (responseData && responseData.refreshToken) {",
          "        pm.environment.set('refreshToken', responseData.refreshToken);",
          "        console.log('Refresh token stored');",
          "    }",
          "    ",
          "    if (responseData && responseData.user && responseData.user._id) {",
          "        pm.environment.set('userId', responseData.user._id);",
          "        console.log('User ID stored');",
          "    }",
          "    ",
          "    if (responseData && responseData.gameId) {",
          "        pm.environment.set('gameId', responseData.gameId);",
          "        console.log('Game ID stored');",
          "    }",
          "    ",
          "    if (responseData && responseData.roomId) {",
          "        pm.environment.set('roomId', responseData.roomId);",
          "        console.log('Room ID stored');",
          "    }",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication and account management endpoints",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"SecurePass123!\",\n  \"phoneNumber\": \"+1234567890\",\n  \"dateOfBirth\": \"1990-01-01\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.eql(201);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data.user).to.have.property('email');",
                  "    pm.expect(responseJson.data.user).to.have.property('username');",
                  "});",
                  "",
                  "// Store user email for login",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.data && responseJson.data.user) {",
                  "    pm.environment.set('testUserEmail', responseJson.data.user.email);",
                  "    pm.environment.set('testUsername', responseJson.data.user.username);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testUserEmail}}\",\n  \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('token');",
                  "    pm.expect(responseJson.data).to.have.property('refreshToken');",
                  "});",
                  "",
                  "pm.test('User data is complete', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.user).to.have.property('email');",
                  "    pm.expect(responseJson.data.user).to.have.property('username');",
                  "    pm.expect(responseJson.data.user).to.have.property('energy');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Get current user profile"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data.user).to.have.property('email');",
                  "    pm.expect(responseJson.data.user).to.have.property('username');",
                  "    pm.expect(responseJson.data.user).to.have.property('gameStats');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{$randomUserName}}_updated\",\n  \"phoneNumber\": \"+1987654321\",\n  \"bio\": \"Updated bio for testing\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Update user profile information"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile updated successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.user).to.have.property('bio', 'Updated bio for testing');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"SecurePass123!\",\n  \"newPassword\": \"NewSecurePass123!\",\n  \"confirmPassword\": \"NewSecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "change-password"]
            },
            "description": "Change user password"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Password changed successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Success message returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh-token",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh-token"]
            },
            "description": "Refresh authentication token"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refreshed successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('New token received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('token');",
                  "    pm.expect(responseJson.data).to.have.property('refreshToken');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout current session"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "// Clear tokens after logout",
                  "pm.environment.unset('authToken');",
                  "pm.environment.unset('refreshToken');"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Social Authentication",
      "description": "Social media authentication endpoints",
      "item": [
        {
          "name": "Google OAuth Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accessToken\": \"{{googleAccessToken}}\",\n  \"email\": \"user@gmail.com\",\n  \"name\": \"Test User\",\n  \"picture\": \"https://example.com/avatar.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/social/google",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "social", "google"]
            },
            "description": "Login with Google OAuth"
          }
        },
        {
          "name": "Facebook OAuth Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accessToken\": \"{{facebookAccessToken}}\",\n  \"email\": \"user@facebook.com\",\n  \"name\": \"Test User\",\n  \"picture\": \"https://example.com/avatar.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/social/facebook",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "social", "facebook"]
            },
            "description": "Login with Facebook OAuth"
          }
        }
      ]
    },
    {
      "name": "Game Management",
      "description": "Game creation, state management, and gameplay endpoints",
      "item": [
        {
          "name": "Create Custom Game",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameConfig\": {\n    \"gameMode\": \"classic\",\n    \"isPrivate\": false,\n    \"maxPlayers\": 2,\n    \"timeLimit\": 300,\n    \"gameName\": \"Test Game {{$timestamp}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/game/create",
              "host": ["{{baseUrl}}"],
              "path": ["game", "create"]
            },
            "description": "Create a custom game room"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Game created successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(201);",
                  "});",
                  "",
                  "pm.test('Game data returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('gameId');",
                  "    pm.expect(responseJson.data).to.have.property('roomId');",
                  "});",
                  "",
                  "// Store game ID for other tests",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.data && responseJson.data.gameId) {",
                  "    pm.environment.set('testGameId', responseJson.data.gameId);",
                  "    pm.environment.set('testRoomId', responseJson.data.roomId);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Game State",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/state/{{testRoomId}}",
              "host": ["{{baseUrl}}"],
              "path": ["game", "state", "{{testRoomId}}"]
            },
            "description": "Get current state of a game"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Game state retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Game state contains board', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('game');",
                  "    pm.expect(responseJson.data.game).to.have.property('board');",
                  "    pm.expect(responseJson.data.game).to.have.property('currentPlayer');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Make Move",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"position\": 0,\n  \"player\": \"X\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/game/move/{{testRoomId}}",
              "host": ["{{baseUrl}}"],
              "path": ["game", "move", "{{testRoomId}}"]
            },
            "description": "Make a move in the game"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Move made successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Game state updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('game');",
                  "    pm.expect(responseJson.data.game).to.have.property('board');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Active Games",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/active",
              "host": ["{{baseUrl}}"],
              "path": ["game", "active"]
            },
            "description": "Get list of active games"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Active games retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Games list returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('games');",
                  "    pm.expect(responseJson.data.games).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Game Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/stats",
              "host": ["{{baseUrl}}"],
              "path": ["game", "stats"]
            },
            "description": "Get current user's game statistics"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Game stats retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Stats contain game data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('stats');",
                  "    pm.expect(responseJson.data.stats).to.have.property('gamesPlayed');",
                  "    pm.expect(responseJson.data.stats).to.have.property('wins');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Leaderboard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/leaderboard?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["game", "leaderboard"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get game leaderboard"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Leaderboard retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Leaderboard contains rankings', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('leaderboard');",
                  "    pm.expect(responseJson.data.leaderboard).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Forfeit Game",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/forfeit/{{testRoomId}}",
              "host": ["{{baseUrl}}"],
              "path": ["game", "forfeit", "{{testRoomId}}"]
            },
            "description": "Forfeit a game"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Game forfeited successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Forfeit confirmed', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Matchmaking",
      "description": "Game matchmaking and queue management",
      "item": [
        {
          "name": "Join Matchmaking Queue",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameMode\": \"classic\",\n  \"skillLevel\": \"beginner\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/game/matchmaking/join",
              "host": ["{{baseUrl}}"],
              "path": ["game", "matchmaking", "join"]
            },
            "description": "Join the matchmaking queue"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Joined queue successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Queue status returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('queuePosition');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Matchmaking Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/matchmaking/status",
              "host": ["{{baseUrl}}"],
              "path": ["game", "matchmaking", "status"]
            },
            "description": "Get current matchmaking status"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Matchmaking status retrieved', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Status contains queue info', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('inQueue');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Leave Matchmaking Queue",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/matchmaking/leave",
              "host": ["{{baseUrl}}"],
              "path": ["game", "matchmaking", "leave"]
            },
            "description": "Leave the matchmaking queue"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Left queue successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Queue left confirmation', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Queue Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/matchmaking/stats",
              "host": ["{{baseUrl}}"],
              "path": ["game", "matchmaking", "stats"]
            },
            "description": "Get matchmaking queue statistics"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Queue stats retrieved', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Stats contain queue data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('totalInQueue');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Chat",
      "description": "Chat room and messaging functionality",
      "item": [
        {
          "name": "Get Chat Rooms",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/rooms",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "rooms"]
            },
            "description": "Get available chat rooms"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat rooms retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Rooms list returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('rooms');",
                  "    pm.expect(responseJson.data.rooms).to.be.an('array');",
                  "});",
                  "",
                  "// Store first room ID for testing",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.data.rooms && responseJson.data.rooms.length > 0) {",
                  "    pm.environment.set('testChatRoomId', responseJson.data.rooms[0]._id || 'general');",
                  "} else {",
                  "    pm.environment.set('testChatRoomId', 'general');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Join Chat Room",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/rooms/{{testChatRoomId}}/join",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "rooms", "{{testChatRoomId}}", "join"]
            },
            "description": "Join a chat room"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Joined chat room successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Join confirmation returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Hello from Postman test! {{$timestamp}}\",\n  \"messageType\": \"text\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat/rooms/{{testChatRoomId}}/messages",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "rooms", "{{testChatRoomId}}", "messages"]
            },
            "description": "Send a message to a chat room"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(201);",
                  "});",
                  "",
                  "pm.test('Message data returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('message');",
                  "    pm.expect(responseJson.data.message).to.have.property('content');",
                  "    pm.expect(responseJson.data.message).to.have.property('sender');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Chat History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/rooms/{{testChatRoomId}}/messages?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "rooms", "{{testChatRoomId}}", "messages"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            },
            "description": "Get chat message history"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat history retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Messages list returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('messages');",
                  "    pm.expect(responseJson.data.messages).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Chat Room Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/rooms/{{testChatRoomId}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "rooms", "{{testChatRoomId}}", "users"]
            },
            "description": "Get users in a chat room"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat room users retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Users list returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('users');",
                  "    pm.expect(responseJson.data.users).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Leave Chat Room",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/rooms/{{testChatRoomId}}/leave",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "rooms", "{{testChatRoomId}}", "leave"]
            },
            "description": "Leave a chat room"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Left chat room successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Leave confirmation returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Admin Endpoints",
      "description": "Administrative endpoints requiring API key",
      "item": [
        {
          "name": "Force Match",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{adminApiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"player1Id\": \"{{userId}}\",\n  \"player2Id\": \"{{targetUserId}}\",\n  \"gameMode\": \"classic\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/game/admin/force-match",
              "host": ["{{baseUrl}}"],
              "path": ["game", "admin", "force-match"]
            },
            "description": "Force a match between two players (Admin only)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Force match executed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Match created successfully', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('success', true);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Cleanup Queue",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{adminApiKey}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/admin/cleanup-queue",
              "host": ["{{baseUrl}}"],
              "path": ["game", "admin", "cleanup-queue"]
            },
            "description": "Cleanup matchmaking queue (Admin only)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cleanup queue executed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Queue cleaned successfully', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('success', true);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Password Reset Flow",
      "description": "Password reset and email verification endpoints",
      "item": [
        {
          "name": "Request Password Reset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testUserEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/request-password-reset",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "request-password-reset"]
            },
            "description": "Request password reset email"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Password reset requested successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Success message returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{resetToken}}\",\n  \"newPassword\": \"NewSecurePass123!\",\n  \"confirmPassword\": \"NewSecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            },
            "description": "Reset password with token"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Password reset completed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Password reset successful', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('success', true);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Verify Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{verificationToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-email"]
            },
            "description": "Verify email address with token"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Email verification attempted', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Email verified successfully', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('success', true);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Resend Verification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testUserEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/resend-verification",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "resend-verification"]
            },
            "description": "Resend email verification"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Verification email resent', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Success message returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
